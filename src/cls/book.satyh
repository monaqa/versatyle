%vim: fdm=marker

@require: list
@require: color
@require: gr
@require: code
@require: base/ref
@require: base/map
@import: ../math
@import: ../table
@import: ../module/counter
@import: ../module/param
@import: ../module/paramfont
@import: ../module/paper
@import: ../module/crossref


module VersatyleBook : sig

  %% signature {{{

  %% document function/commands {{{

  val document : 'title-cfg -> block-text -> document
    constraint 'title-cfg :: (|
      title: inline-text list;
      author: inline-text list;
      date: inline-text list;
    |)

  direct +part : [string?; inline-text; block-text] block-cmd
  direct +chapter : [string?; inline-text; block-text] block-cmd
  direct +section : [string?; inline-text; block-text] block-cmd
  direct +subsection : [string?; inline-text; block-text] block-cmd
  direct +subsubsection : [string?; inline-text; block-text] block-cmd

  direct \math : [math] inline-cmd
  direct +p : [inline-text] block-cmd
  direct \emph : [inline-text] inline-cmd

  % }}}

  % parameters/counters {{{

  val param-text : (|
    normal : param-font;
    emph : param-font;
    doc-title : param-font;
    doc-author : param-font;
    doc-date : param-font;
    part-title-num : param-font;
    part-title-text : param-font;
    chapter-title : param-font;
    section-title : param-font;
    subsection-title : param-font;
    subsubsection-title : param-font;
    chapter-title : param-font;
  |)

  val param-length :  (|
    paper : (length * length) Param.t;
    text-width : length Param.t;
    text-height : length Param.t;
    text-origin-pos : (length * length) Param.t;
    sec-num-skip : length Param.t;
    sse-num-skip : length Param.t;
    sss-num-skip : length Param.t;
    p-indent : length Param.t;
    doc-title-space : (|
      between-title-author : length Param.t;
      between-author-date : length Param.t;
    |)
  |)

  val counter-part : Counter.t
  val counter-chp  : Counter.t
  val counter-sec  : Counter.t
  val counter-sse  : Counter.t
  val counter-sss  : Counter.t

  % }}}

  %% }}}

end = struct

  %% parameters/counters {{{

  let default-font-normal = (|
    font-color = (RGB(0., 0., 0.));
    font-latin = (`Junicode`, 1.13, 0.);
    font-cjk   = (`ipaexm`, 1.0, 0.);
    size = 10pt;
    par-margin-ratio = (0.6, 0.6);
    leading-ratio = 1.6;
    min-gap-ratio = 0.3;
  |)

  let default-font-emph = (|
    default-font-normal with
      font-latin = (`Junicode-it`, 1.13, 0.);
      font-cjk = (`ipaexg`, 1.13, 0.);
  |)

  let default-font-title = (|
    default-font-normal with
      font-latin = (`Junicode`, 1.13, 0.);
      font-cjk = (`ipaexg`, 1.13, 0.);
      par-margin-ratio = (1.0, 0.8);
  |)

  let param-text =
    (|
      normal = ParamFont.make default-font-normal;
      emph = ParamFont.make default-font-emph;
      doc-title = (| (ParamFont.make default-font-title) with
        size = Param.make 28pt; par-margin-ratio = Param.make (0.4, 0.4) |);
      doc-author = (| (ParamFont.make default-font-normal) with
        size = Param.make 16pt; par-margin-ratio = Param.make (0.4, 0.4) |);
      doc-date = (| (ParamFont.make default-font-normal) with
        size = Param.make 12pt; par-margin-ratio = Param.make (0.4, 0.4) |);
      part-title-num = (| (ParamFont.make default-font-title) with
        size = Param.make 16pt; par-margin-ratio = Param.make (0.8, 0.8)|);
      part-title-text = (| (ParamFont.make default-font-title) with
        size = Param.make 28pt; par-margin-ratio = Param.make (0.8, 0.8)|);
      chapter-title = (| (ParamFont.make default-font-title) with
        size = Param.make 28pt; |);
      section-title = (| (ParamFont.make default-font-title) with
        size = Param.make 20pt; |);
      subsection-title = (| (ParamFont.make default-font-title) with
        size = Param.make 16pt; |);
      subsubsection-title = (| (ParamFont.make default-font-title) with
        size = Param.make 12pt; |);
    |)

  let param-length = (|
    paper = Param.make Paper.a4;
    text-width = Param.make 440pt;
    text-height = Param.make 630pt;
    text-origin-pos = Param.make (60pt, 100pt);
    sec-num-skip = Param.make 10pt;
    sse-num-skip = Param.make 8pt;
    sss-num-skip = Param.make 5pt;
    p-indent = param-text#normal#size;
    doc-title-space = (|
      between-title-author = Param.make 20pt;
      between-author-date = Param.make 20pt;
    |)
  |)

  % counter

  let counter-sss = Counter.make 0 []
  let counter-sse = Counter.make 0 [counter-sss;]
  let counter-sec = Counter.make 0 [counter-sse; VersatyleMathEquation.ctr]
  let counter-chp = Counter.make 0 [counter-sec;]
  let counter-part = Counter.make 0 []

  % カスタムの labelf
  let () =
    let chp-sec-label base idx =
      let _ = VersatyleMathEquation.ctr |> Counter.inc in
      let it-eqnnum = embed-string (arabic (base + idx)) in
      {(\getcounter(counter-chp);.\getcounter(counter-sec);.#it-eqnnum;)}
    in
    VersatyleMathEquation.set-labelf chp-sec-label

  %% }}}

  %% convenient values/functions {{{
  let no-pads = (0pt, 0pt, 0pt, 0pt)
  %% }}}

  %% math-cmd {{{

  let-inline ctx \math m =
    script-guard Latin (embed-math ctx m)

  %% }}}

  %% document {{{

  let document record bt =

    % fix parameters. {{{
    % You cannot change any values of parameter without unfixing.

    let () = ParamFont.fix param-text#normal in
    let () = ParamFont.fix param-text#emph in
    let () = ParamFont.fix param-text#doc-title in
    let () = ParamFont.fix param-text#doc-author in
    let () = ParamFont.fix param-text#doc-date in
    let () = ParamFont.fix param-text#part-title-num in
    let () = ParamFont.fix param-text#part-title-text in
    let () = ParamFont.fix param-text#chapter-title in
    let () = ParamFont.fix param-text#section-title in
    let () = ParamFont.fix param-text#subsection-title in
    let () = ParamFont.fix param-text#subsubsection-title in
    let () = ParamFont.fix param-text#chapter-title in

    let () = Param.fix param-length#paper in
    let () = Param.fix param-length#text-width in
    let () = Param.fix param-length#text-height in
    let () = Param.fix param-length#text-origin-pos in
    let () = Param.fix param-length#sec-num-skip in
    let () = Param.fix param-length#sse-num-skip in
    let () = Param.fix param-length#sss-num-skip in
    let () = Param.fix param-length#p-indent in
    let () = Param.fix param-length#doc-title-space#between-title-author in
    let () = Param.fix param-length#doc-title-space#between-author-date in

    % }}}

    % initial context {{{

    let ctx =
      get-initial-context (Param.get param-length#text-width) (command \math)
        |> set-code-text-command (command \code)
        |> set-dominant-wide-script Kana
        |> set-language Kana Japanese
        |> set-language HanIdeographic Japanese
        |> set-dominant-narrow-script Latin
        |> set-language Latin English
        |> ParamFont.set param-text#normal
        |> set-hyphen-penalty 100
    in

    % }}}

    % title {{{

    let bb-title-block = 

      let make-centered-lines ctx it-lst =
        let to-centered-bb it =
          line-break false false ctx
          (inline-fil ++ (read-inline ctx it) ++ inline-fil)
        in
        (List.map to-centered-bb it-lst) |> List.fold-left (+++) block-nil
      in

      let ctx-title = ctx |> ParamFont.set param-text#doc-title in
      let ctx-author = ctx |> ParamFont.set param-text#doc-author in
      let ctx-date = ctx |> ParamFont.set param-text#doc-date in

      let bb-title = make-centered-lines ctx-title record#title in
      let bb-author = make-centered-lines ctx-author record#author in
      let bb-date = make-centered-lines ctx-date record#date in

      bb-title +++ (block-skip (Param.get param-length#doc-title-space#between-title-author))
        +++ bb-author +++ (block-skip (Param.get param-length#doc-title-space#between-author-date))
          +++ bb-date

    in

    % }}}

    let bb = read-block ctx bt in
    let (paper-width, paper-height) = Param.get param-length#paper in
    let paper = UserDefinedPaper(paper-width, paper-height) in

    % header/footer {{{

    let pagecontf _ =
      (|
        text-origin = (Param.get param-length#text-origin-pos);
        text-height = (Param.get param-length#text-height);
      |)
    in
    let pagepartsf _ =
      (|
        header-origin = (0pt, 0pt);
        header-content = block-nil;
        footer-origin = (0pt, 0pt);
        footer-content = block-nil;
      |)
    in

    % }}}

    let doc = page-break paper pagecontf pagepartsf (bb-title-block +++ bb) in

    let () = register-outline (List.reverse (Ref.get CrossRef.outline)) in

    doc

  %% }}}

  %% section {{{

  let num-to-roman-char capital num =
    let unic-point = match num with
      |  1 -> 0x0049  % `I`
      |  5 -> 0x0056  % `V`
      | 10 -> 0x0058  % `X`
      |  _ -> 0x003F  % `?`
    in
    if capital then unic-point else unic-point + 0x20

  let roman-seq num = match num with
    |  1 -> [ 1;                 ] % i
    |  2 -> [ 1;  1;             ] % ii
    |  3 -> [ 1;  1;  1;         ] % iii
    |  4 -> [ 1;  5;             ] % iv
    |  5 -> [ 5;                 ] % v
    |  6 -> [ 5;  1;             ] % vi
    |  7 -> [ 5;  1;  1;         ] % vii
    |  8 -> [ 5;  1;  1;  1;     ] % viii
    |  9 -> [ 1; 10;             ] % ix
    | 10 -> [10;                 ] % x
    | 11 -> [10;  1;             ] % xi
    | 12 -> [10;  1;  1;         ] % xii
    | 13 -> [10;  1;  1;  1;     ] % xiii
    | 14 -> [10;  1;  5;         ] % xiv
    | 15 -> [10;  5;             ] % xv
    | 16 -> [10;  5;  1;         ] % xvi
    | 17 -> [10;  5;  1;  1;     ] % xvii
    | 18 -> [10;  5;  1;  1;  1; ] % xviii
    | 19 -> [10;  1; 10;         ] % xix
    | 20 -> [10; 10;             ] % xx
    | 21 -> [10; 10;  1;         ] % xxi
    | 22 -> [10; 10;  1;  1;     ] % xxii
    | 23 -> [10; 10;  1;  1;  1; ] % xxiii
    | 24 -> [10; 10;  1;  5;     ] % xxiv
    | 25 -> [10; 10;  5;         ] % xxv
    |  _ -> [ 0;  0;             ] % ??

  let to-roman num =
      string-unexplode (List.map (fun i -> num-to-roman-char false i) (roman-seq num))

  let to-Roman num =
      string-unexplode (List.map (fun i -> num-to-roman-char true i) (roman-seq num))

  let-block ctx +part ?:labelopt it-title bt-inner =
    let str-num = to-Roman (Counter.inc counter-part) in
    let it-num = let it = embed-string str-num in {PART #it;} in
    let hook-register = (str-num |> CrossRef.register labelopt None (Some(0))) in

    let ctx-title = ctx |> ParamFont.set param-text#part-title-text in
    let ctx-num = ctx |> ParamFont.set param-text#part-title-num in
    let ib-num = read-inline ctx it-num in
    let ib-title = hook-register ++ (read-inline ctx-title it-title) in

    let ib-gr = inline-graphics (Param.get param-length#text-width) 3pt 0pt (fun (x, y) -> [
      fill (Color.gray 0.6) (Gr.rectangle (x, y) (x +' (Param.get param-length#text-width), y +' 3pt))
    ])
    in

    let bb-gr = line-break false false (ctx-title |> set-paragraph-margin 0pt 20pt) ib-gr in

    let bb-num = line-break false false ctx-num (inline-fil ++ ib-num ++ inline-fil) in
    let bb-title = line-break true false ctx-title (inline-fil ++ ib-title ++ inline-fil) in
    let bb-title-overall = bb-gr +++ bb-num +++ bb-title +++ bb-gr in
    let bb-inner = read-block ctx bt-inner in

    let skip-length = (Param.get (param-length#text-height) -' (get-natural-length bb-title-overall)) *' 0.5 in

    clear-page +++ (block-skip skip-length)
      +++ bb-title-overall +++ bb-inner

  let-block ctx +chapter ?:labelopt it-title bt-inner =
    let str-num = arabic (Counter.inc counter-chp) in
    let it-num = {Chapter \getcounter(counter-chp);} in
    let hook-register = (str-num |> CrossRef.register labelopt None (Some(1))) in

    let ctx-title = ctx |> ParamFont.set (param-text#chapter-title) in
    let leading-height = (get-font-size ctx-title) *' 0.5 in
    let title-inner-sep = (get-font-size ctx-title) *' 1.2 in
    let ib-num = read-inline ctx-title it-num in
    let ib-title = hook-register ++ (read-inline ctx-title it-title) in

    let bb-num = line-break true false
      (ctx-title |> set-paragraph-margin 0pt leading-height)
        (ib-num ++ inline-fil)
    in
    let bb-title = line-break false false
      (ctx-title |> set-paragraph-margin leading-height title-inner-sep)
        (ib-title ++ inline-fil)
    in
    let bb-inner = read-block ctx bt-inner in

    clear-page +++ bb-num +++ bb-title +++ bb-inner

  let-block ctx +section ?:labelopt it-title bt-inner =
    let str-num =
      (arabic (Counter.get counter-chp)) ^ `.` ^
        (arabic (Counter.inc counter-sec))
    in
    let it-num = embed-string str-num in
    let hook-register = (str-num |> CrossRef.register labelopt None (Some(2))) in

    let ctx-title = ctx |> ParamFont.set param-text#section-title in
    let ib-num = read-inline ctx-title it-num in
    let ib-title = hook-register ++ (read-inline ctx-title it-title) in
    let bb-title =
      line-break true false ctx-title
        (ib-num ++ (inline-skip (Param.get param-length#sec-num-skip)) ++ ib-title ++ inline-fil)
    in
    let bb-inner = read-block ctx bt-inner in

    bb-title +++ bb-inner

  let-block ctx +subsection ?:labelopt it-title bt-inner =
    let str-num =
      (arabic (Counter.get counter-chp)) ^ `.` ^
        (arabic (Counter.get counter-sec)) ^ `.` ^
        (arabic (Counter.inc counter-sse))
    in
    let it-num = embed-string str-num in
    let hook-register = (str-num |> CrossRef.register labelopt None (Some(3))) in

    let ctx-title = ctx |> ParamFont.set param-text#subsection-title in
    let ib-num = read-inline ctx-title it-num in
    let ib-title = hook-register ++ (read-inline ctx-title it-title) in
    let bb-title =
      line-break true false ctx-title
        (ib-num ++ (inline-skip (Param.get param-length#sse-num-skip)) ++ ib-title ++ inline-fil)
    in
    let bb-inner = read-block ctx bt-inner in

    bb-title +++ bb-inner

  let-block ctx +subsubsection ?:labelopt it-title bt-inner =
    let str-num =
      (arabic (Counter.get counter-chp)) ^ `.` ^
        (arabic (Counter.get counter-sec)) ^ `.` ^
        (arabic (Counter.get counter-sse)) ^ `.` ^
        (arabic (Counter.inc counter-sss))
    in
    let it-num = embed-string str-num in
    let hook-register = (str-num |> CrossRef.register labelopt None (Some(4))) in

    let ctx-title = ctx |> ParamFont.set param-text#subsubsection-title in
    let ib-num = read-inline ctx-title it-num in
    let ib-title = hook-register ++ (read-inline ctx-title it-title) in
    let bb-title =
      line-break true false ctx-title
        (ib-num ++ (inline-skip (Param.get param-length#sss-num-skip)) ++ ib-title ++ inline-fil)
    in
    let bb-inner = read-block ctx bt-inner in

    bb-title +++ bb-inner

  %% }}}

  %% paragraph/inline-decoration {{{

  let-block ctx +p it =
    line-break true true ctx
      (inline-skip (Param.get param-length#p-indent) ++ (read-inline ctx it) ++ inline-fil)

  let-inline ctx \emph it =
    let ctx-emph = ctx |> ParamFont.set-font param-text#emph in
    read-inline ctx-emph it

  %% }}}

  % ref {{{

  % }}}

end
