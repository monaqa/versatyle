% versatyle/math/equation.satyh
%
% align や gather に相当するコマンド群．

@import: ../matrix

module VersatyleMathEquation : sig

  direct +gather : [inline-text list?; math list;] block-cmd
  direct +eqnalign : [inline-text list?; math list;] block-cmd
  direct +eqnalignat : [int; math list;] block-cmd
  % direct \gather : [math list;] inline-cmd
  % direct \align : [math list;] inline-cmd
  % direct \alignat : [int; math list;] inline-cmd
  % direct \aligned : [math list;] math-cmd
  % direct \alignedat : [int; math list;] math-cmd

end = struct

  let-rec map-each f-lst lst =
    match f-lst with
    | [] -> []
    | f1::fs -> (match lst with
                 | [] -> []
                 | x1::xs ->  (f1 x1) :: (map-each fs xs))

  let math-to-aligned-ib ctx idx m mprevopt mnextopt =
    let lengap = get-font-size ctx *' 2. in

    let ibm = embed-math ctx m in
    let ib =
      match mnextopt with
      | None -> ibm
      | Some(mnext) ->
          let ibspaceopt = space-between-maths ctx m mnext in
          ( match ibspaceopt with
            | None          -> ibm
            | Some(ibspace) -> ibm ++ ibspace
          )
    in

    if idx mod 2 == 0 then
      inline-fil ++ ib
    else
      match mnextopt with
      | None    -> ib ++ inline-fil
      | Some(_) -> ib ++ inline-fil ++ inline-skip lengap

  let create-max-height-vphantom lst-ib inner =
    % inline-boxes のリストに対し，それらの最大の高さ/最大の深さを求め，
    % それらをそれぞれ高さ・深さにもつよう加工した inline-boxes を返す．
    % ただし， width は 0 とする．
    let maximum len1 len2 = if len1 >' len2 then len1 else len2 in
    let get-natural-height ib = let (_, h, _) = get-natural-metrics ib in h in
    let get-natural-depth  ib = let (_, _, d) = get-natural-metrics ib in d in
    let max-height = List.fold-right maximum 0pt (List.map get-natural-height lst-ib) in
    let max-depth = List.fold-right maximum 0pt (List.map get-natural-depth lst-ib) in

    let (w, _, _) = get-natural-metrics inner in
    inline-graphics 0pt max-height max-depth (fun (x, y) -> [
      draw-text (x -' w, y) inner
    ])


  let-block ctx +gather ?:it-lst-label-opt mlst =
    let it-lst-label =
      match it-lst-label-opt with
      | Some(itlst) -> itlst
      | None -> {| |}
    in
    let vlen = 4pt in

    let math-matrix = Matrix.from-list 1 ${} mlst in
    let ib-matrix =
      let math-to-centered-ib ctx m = inline-fil ++ (embed-math ctx m) ++ inline-fil in
      Matrix.map (math-to-centered-ib ctx) math-matrix in

    let cell-matrix =
      Matrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
    in

    % Label 表示用のテーブル（右端に置いて複数行に渡るラベルを実現する）
    let ib-lst-label = List.map (read-inline ctx) it-lst-label in
    let max-height-vphantom-f = List.map create-max-height-vphantom (Matrix.to-llist ib-matrix) in
    let dummy-ib = read-inline ctx {} in
    let ib-phantom-label-matrix = Matrix.from-list 1 dummy-ib (map-each max-height-vphantom-f ib-lst-label) in
    let cell-label-matrix =
      Matrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-phantom-label-matrix
    in

    % let rulef = (labelf [read-inline ctx {hose}; read-inline ctx {fuga}] 300pt) in
    let rulef _ _ = [] in
    let ib-tabular = tabular (Matrix.to-llist cell-matrix) rulef in
    let ib-label-tabular = tabular (Matrix.to-llist cell-label-matrix) rulef in

    let margin = get-font-size ctx *' 1.0 in
    let ctx-eqn = ctx |> set-paragraph-margin margin margin in
    line-break true true ctx-eqn (inline-fil ++ ib-tabular ++ inline-fil ++ ib-label-tabular)


  let-block ctx +eqnalign ?:it-lst-label-opt mlst =
    let it-lst-label =
      match it-lst-label-opt with
      | Some(itlst) -> itlst
      | None -> {| |}
    in
    let vlen = 4pt in

    let math-matrix = Matrix.from-list 2 ${} mlst in
    let ib-matrix = Matrix.map-rowidx-adjacent (math-to-aligned-ib ctx) math-matrix in

    let cell-matrix =
      Matrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
    in

    % Label 表示用のテーブル（右端に置いて複数行に渡るラベルを実現する）
    let ib-lst-label = List.map (read-inline ctx) it-lst-label in
    let max-height-vphantom-f = List.map create-max-height-vphantom (Matrix.to-llist ib-matrix) in
    let dummy-ib = read-inline ctx {} in
    let ib-phantom-label-matrix = Matrix.from-list 1 dummy-ib (map-each max-height-vphantom-f ib-lst-label) in
    let cell-label-matrix =
      Matrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-phantom-label-matrix
    in

    % let rulef = (labelf [read-inline ctx {hose}; read-inline ctx {fuga}] 300pt) in
    let rulef _ _ = [] in
    let ib-tabular = tabular (Matrix.to-llist cell-matrix) rulef in
    let ib-label-tabular = tabular (Matrix.to-llist cell-label-matrix) rulef in

    let margin = get-font-size ctx *' 1.0 in
    let ctx-eqn = ctx |> set-paragraph-margin margin margin in
    line-break true true ctx-eqn (inline-fil ++ ib-tabular ++ inline-fil ++ ib-label-tabular)


  let-block ctx +eqnalignat ncol mlst =

    let vlen = 4pt in

    let math-matrix = Matrix.from-list (ncol * 2) ${} mlst in
    let ib-matrix = Matrix.map-rowidx-adjacent (math-to-aligned-ib ctx) math-matrix in

    let cell-matrix =
      Matrix.map (fun ib -> NormalCell((0pt, 0pt, vlen, vlen), ib)) ib-matrix
    in

    let rulef _ _ = [] in
    let ib-tabular = tabular (Matrix.to-llist cell-matrix) rulef in

    let margin = get-font-size ctx *' 1.0 in
    let ctx-eqn = ctx |> set-paragraph-margin margin margin in
    line-break true true ctx-eqn (inline-fil ++ ib-tabular ++ inline-fil)

end
