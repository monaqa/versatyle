%vim: fdm=marker

@require: list
@require: color
@require: gr
@require: base/ref
@require: base/map
@import: math


module Versatyle : sig

  %% signature {{{

  val document : 'title-cfg -> block-text -> document
    constraint 'title-cfg :: (|
      title: inline-text list;
      author: inline-text list;
      date: inline-text list;
    |)

  val counter : (|
      part: int ref;
      chapter: int ref;
      section: int ref;
      subsection: int ref;
      subsubsection: int ref;
    |)

  direct +part : [inline-text; block-text] block-cmd
  direct +chapter : [inline-text; block-text] block-cmd
  direct +section : [inline-text; block-text] block-cmd
  direct +subsection : [inline-text; block-text] block-cmd
  direct +subsubsection : [inline-text; block-text] block-cmd

  direct \math : [math] inline-cmd
  direct +p : [inline-text] block-cmd
  direct \emph : [inline-text] inline-cmd

  direct +set-param: ['a ref; 'a] block-cmd

  %% }}}

end = struct

  %% config {{{


  let cfg-text-normal = (|
    size = 10pt;
    font-latin = (`Junicode`, 1.13, 0.);
    font-cjk   = (`ipaexm`, 1.0, 0.);
    font-math  = `lmodern`;
    par-margin-ratio = (0.6, 0.6);
    leading-ratio = 1.4;
  |)

  let cfg-text-emph = (|
    cfg-text-normal
      with font-cjk = (`ipaexg`, 1.0, 0.);
      font-latin = (`Junicode-it`, 1.13, 0.);
  |)

  let cfg-text-title = (|
    cfg-text-normal
      with font-cjk = (`ipaexg`, 1.0, 0.);
      font-latin = (`Junicode`, 1.13, 0.);
      par-margin-ratio = (1.0, 0.8);
  |)

  let cfg-text = (|
    normal = cfg-text-normal;
    emph =cfg-text-emph;
    doc-title = (| cfg-text-title with size = 28pt; par-margin-ratio = (0.4, 0.4) |);
    doc-author = (| cfg-text-normal with size = 16pt; par-margin-ratio = (0.4, 0.4) |);
    doc-date = (| cfg-text-normal with size = 12pt; par-margin-ratio = (0.4, 0.4) |);
    part-title-num = (| cfg-text-title with size = 16pt; par-margin-ratio = (0.8, 0.8)|);
    part-title-text = (| cfg-text-title with size = 28pt; par-margin-ratio = (0.8, 0.8)|);
    chapter-title = (| cfg-text-title with size = 28pt; |);
    section-title = (| cfg-text-title with size = 20pt; |);
    subsection-title = (| cfg-text-title with size = 16pt; |);
    subsubsection-title = (| cfg-text-title with size = 12pt; |);
  |)

  let cfg-length = (|
    text-width = 440pt;
    text-height = 630pt;
    text-origin-pos = (60pt, 100pt);
    sec-num-skip = 10pt;
    sse-num-skip = 8pt;
    sss-num-skip = 5pt;
    p-indent = cfg-text#normal#size;
    doc-title-space = (|
      between-title-author = 20pt;
      between-author-date = 20pt;
    |)
  |)

  %% }}}

  %% convenient values/functions {{{

  let-block ctx +set-param key value =
    let () = key |> Ref.set value in
    block-nil

  % size だけを変更する
  let set-font-cfg-size fcfg ctx = set-font-size fcfg#size ctx

  % 書体だけを変更する
  let set-font-cfg-font fcfg ctx =
    ctx |> set-font Kana           fcfg#font-cjk
        |> set-font HanIdeographic fcfg#font-cjk
        |> set-font Latin          fcfg#font-latin
        |> set-math-font fcfg#font-math

  % 一括で変更する
  let set-font-cfg fcfg ctx =
    let fsize = fcfg#size in
    let (mgn-upper-ratio, mgn-lower-ratio) = fcfg#par-margin-ratio in
    ctx |> set-font-size fsize
        |> set-font-cfg-font fcfg
        |> set-paragraph-margin (fsize *' mgn-upper-ratio) (fsize *' mgn-lower-ratio)
        |> set-leading (fsize *' fcfg#leading-ratio)

  let no-pads = (0pt, 0pt, 0pt, 0pt)
  %% }}}

  %% math-cmd {{{

  let-inline ctx \math m =
    script-guard Latin (embed-math ctx m)

  %% }}}

  %% document {{{

  let document record bt =

    % initial context {{{

    let ctx =
      get-initial-context cfg-length#text-width (command \math)
        |> set-dominant-wide-script Kana
        |> set-language Kana Japanese
        |> set-language HanIdeographic Japanese
        |> set-dominant-narrow-script Latin
        |> set-language Latin English
        |> set-font-cfg cfg-text#normal
        |> set-hyphen-penalty 100
    in

    % }}}

    % title {{{

    let bb-title-block = 

      let make-centered-lines ctx it-lst =
        let to-centered-bb it =
          line-break false false ctx
          (inline-fil ++ (read-inline ctx it) ++ inline-fil)
        in
        (List.map to-centered-bb it-lst) |> List.fold-left (+++) block-nil
      in

      let ctx-title = ctx |> set-font-cfg cfg-text#doc-title in
      let ctx-author = ctx |> set-font-cfg cfg-text#doc-author in
      let ctx-date = ctx |> set-font-cfg cfg-text#doc-date in

      let bb-title = make-centered-lines ctx-title record#title in
      let bb-author = make-centered-lines ctx-author record#author in
      let bb-date = make-centered-lines ctx-date record#date in

      bb-title +++ (block-skip cfg-length#doc-title-space#between-title-author)
        +++ bb-author +++ (block-skip cfg-length#doc-title-space#between-author-date)
          +++ bb-date

    in

    % }}}

    let bb = read-block ctx bt in

    % header/footer {{{

    let pagecontf _ =
      (|
        text-origin = cfg-length#text-origin-pos;
        text-height = cfg-length#text-height;
      |)
    in
    let pagepartsf _ =
      (|
        header-origin = (0pt, 0pt);
        header-content = block-nil;
        footer-origin = (0pt, 0pt);
        footer-content = block-nil;
      |)
    in

    % }}}

    page-break A4Paper pagecontf pagepartsf (bb-title-block +++ bb)

  %% }}}

  %% section {{{

    let counter = (|
      part = Ref.make 0;
      chapter = Ref.make 0;
      section = Ref.make 0;
      subsection = Ref.make 0;
      subsubsection = Ref.make 0;
    |)

  let num-to-roman-char capital num =
    let unic-point = match num with
      |  1 -> 0x0049  % `I`
      |  5 -> 0x0056  % `V`
      | 10 -> 0x0058  % `X`
      |  _ -> 0x003F  % `?`
    in
    if capital then unic-point else unic-point + 0x20

  let roman-seq num = match num with
    |  1 -> [ 1;                 ] % i
    |  2 -> [ 1;  1;             ] % ii
    |  3 -> [ 1;  1;  1;         ] % iii
    |  4 -> [ 1;  5;             ] % iv
    |  5 -> [ 5;                 ] % v
    |  6 -> [ 5;  1;             ] % vi
    |  7 -> [ 5;  1;  1;         ] % vii
    |  8 -> [ 5;  1;  1;  1;     ] % viii
    |  9 -> [ 1; 10;             ] % ix
    | 10 -> [10;                 ] % x
    | 11 -> [10;  1;             ] % xi
    | 12 -> [10;  1;  1;         ] % xii
    | 13 -> [10;  1;  1;  1;     ] % xiii
    | 14 -> [10;  1;  5;         ] % xiv
    | 15 -> [10;  5;             ] % xv
    | 16 -> [10;  5;  1;         ] % xvi
    | 17 -> [10;  5;  1;  1;     ] % xvii
    | 18 -> [10;  5;  1;  1;  1; ] % xviii
    | 19 -> [10;  1; 10;         ] % xix
    | 20 -> [10; 10;             ] % xx
    | 21 -> [10; 10;  1;         ] % xxi
    | 22 -> [10; 10;  1;  1;     ] % xxii
    | 23 -> [10; 10;  1;  1;  1; ] % xxiii
    | 24 -> [10; 10;  1;  5;     ] % xxiv
    | 25 -> [10; 10;  5;         ] % xxv
    |  _ -> [ 0;  0;             ] % ??

  let to-roman num =
    embed-string
      (string-unexplode
        (List.map (fun i -> num-to-roman-char false i) (roman-seq num)))

  let to-Roman num =
    embed-string
      (string-unexplode
        (List.map (fun i -> num-to-roman-char true i) (roman-seq num)))

  let-block ctx +part it-title bt-inner =
    let () = Ref.inc counter#part in
    let idx = to-Roman (Ref.get counter#part) in

    let ctx-title = ctx |> set-font-cfg cfg-text#part-title-text in
    let ctx-num = ctx |> set-font-cfg cfg-text#part-title-num in
    let ib-num = read-inline ctx-num {PART #idx;} in
    let ib-title = read-inline ctx-title it-title in

    let ib-gr = inline-graphics cfg-length#text-width 3pt 0pt (fun (x, y) -> [
      fill (Color.gray 0.6) (Gr.rectangle (x, y) (x +' cfg-length#text-width, y +' 3pt))
    ])
    in

    let bb-gr = line-break false false (ctx-title |> set-paragraph-margin 0pt 20pt) ib-gr in

    let bb-num = line-break false false ctx-num (inline-fil ++ ib-num ++ inline-fil) in
    let bb-title = line-break true false ctx-title (inline-fil ++ ib-title ++ inline-fil) in
    let bb-title-overall = bb-gr +++ bb-num +++ bb-title +++ bb-gr in
    let bb-inner = read-block ctx bt-inner in

    let skip-length = (cfg-length#text-height -' (get-natural-length bb-title-overall)) *' 0.5 in

    clear-page +++ (block-skip skip-length)
      +++ bb-title-overall +++ bb-inner

  let-block ctx +chapter it-title bt-inner =
    let () = Ref.inc counter#chapter in
    let () = Ref.set 0 counter#section in
    let () = Ref.set 0 counter#subsection in
    let () = Ref.set 0 counter#subsubsection in
    let idx = embed-string (arabic (Ref.get counter#chapter)) in
    let it-num = {Chapter #idx;} in

    let ctx-title = ctx |> set-font-cfg cfg-text#chapter-title in
    let leading-height = (get-font-size ctx-title) *' 0.5 in
    let title-inner-sep = (get-font-size ctx-title) *' 1.2 in
    let ib-num = read-inline ctx-title it-num in
    let ib-title = read-inline ctx-title it-title in

    let bb-num = line-break true false
      (ctx-title |> set-paragraph-margin 0pt leading-height)
        (ib-num ++ inline-fil)
    in
    let bb-title = line-break false false
      (ctx-title |> set-paragraph-margin leading-height title-inner-sep)
        (ib-title ++ inline-fil)
    in
    let bb-inner = read-block ctx bt-inner in

    clear-page +++ bb-num +++ bb-title +++ bb-inner

  let-block ctx +section it-title bt-inner =
    let () = Ref.inc counter#section in
    let () = Ref.set 0 counter#subsection in
    let () = Ref.set 0 counter#subsubsection in
    let idx-chp = embed-string (arabic (Ref.get counter#chapter)) in
    let idx-sec = embed-string (arabic (Ref.get counter#section)) in
    let it-num = {#idx-chp;.#idx-sec;} in

    let ctx-title = ctx |> set-font-cfg cfg-text#section-title in
    let ib-num = read-inline ctx-title it-num in
    let ib-title = read-inline ctx-title it-title in
    let bb-title =
      line-break true false ctx-title
        (ib-num ++ (inline-skip cfg-length#sec-num-skip) ++ ib-title ++ inline-fil)
    in
    let bb-inner = read-block ctx bt-inner in

    bb-title +++ bb-inner

  let-block ctx +subsection it-title bt-inner =
    let () = Ref.inc counter#subsection in
    let () = Ref.set 0 counter#subsubsection in
    let idx-chp = embed-string (arabic (Ref.get counter#chapter)) in
    let idx-sec = embed-string (arabic (Ref.get counter#section)) in
    let idx-sse = embed-string (arabic (Ref.get counter#subsection)) in
    let it-num = {#idx-chp;.#idx-sec;.#idx-sse;} in

    let ctx-title = ctx |> set-font-cfg cfg-text#subsection-title in
    let ib-num = read-inline ctx-title it-num in
    let ib-title = read-inline ctx-title it-title in
    let bb-title =
      line-break true false ctx-title
        (ib-num ++ (inline-skip cfg-length#sse-num-skip) ++ ib-title ++ inline-fil)
    in
    let bb-inner = read-block ctx bt-inner in

    bb-title +++ bb-inner

  let-block ctx +subsubsection it-title bt-inner =
    let ctx-title = ctx |> set-font-cfg cfg-text#subsubsection-title in
    let ib-num = read-inline ctx-title {1.1.1.1} in
    let ib-title = read-inline ctx-title it-title in
    let bb-title =
      line-break true false ctx-title
        (ib-num ++ (inline-skip cfg-length#sss-num-skip) ++ ib-title ++ inline-fil)
    in
    let bb-inner = read-block ctx bt-inner in

    bb-title +++ bb-inner

  %% }}}

  %% paragraph/inline-decoration {{{

  let-block ctx +p it =
    line-break true true ctx
      (inline-skip cfg-length#p-indent ++ (read-inline ctx it) ++ inline-fil)

  let-inline ctx \emph it =
    let ctx-emph = ctx |> set-font-cfg-font cfg-text#emph in
    read-inline ctx-emph it

  %% }}}

end
