@import: param

type param-font = (|
  font-color : color Param.t;
  font-latin : (string * float * float) Param.t;
  font-cjk   : (string * float * float) Param.t;
  size : length Param.t;
  par-margin-ratio : (float * float) Param.t;
  leading-ratio : float Param.t;
  min-gap-ratio : float Param.t;
|)

module ParamFont : sig

  val make : (|
    font-color : color;
    font-latin : (string * float * float);
    font-cjk   : (string * float * float);
    size : length;
    par-margin-ratio : (float * float);
    leading-ratio : float;
    min-gap-ratio : float;
  |) -> param-font

  val set : param-font -> context -> context

  val set-font : param-font -> context -> context

  val set-size : param-font -> context -> context

  val fix : param-font -> unit

end = struct

  let make rcd-prm =
    (|
      font-color = Param.make rcd-prm#font-color;
      font-latin = Param.make rcd-prm#font-latin;
      font-cjk   = Param.make rcd-prm#font-cjk;
      size = Param.make rcd-prm#size;
      par-margin-ratio = Param.make rcd-prm#par-margin-ratio;
      leading-ratio = Param.make rcd-prm#leading-ratio;
      min-gap-ratio = Param.make rcd-prm#min-gap-ratio;
    |)

  let set-font prm ctx =
    ctx |> set-font Kana           (Param.get prm#font-cjk)
        |> set-font HanIdeographic (Param.get prm#font-cjk)
        |> set-font Latin          (Param.get prm#font-latin)
        |> set-text-color (Param.get prm#font-color)

  let set-size prm ctx =
    let fsize = Param.get prm#size in
    let (mgn-upper-ratio, mgn-lower-ratio) = Param.get prm#par-margin-ratio in
    ctx |> set-font-size fsize
        |> set-paragraph-margin (fsize *' mgn-upper-ratio) (fsize *' mgn-lower-ratio)
        |> set-leading (fsize *' (Param.get prm#leading-ratio))
        |> set-min-gap-of-lines (fsize *' (Param.get prm#min-gap-ratio))

  let set prm ctx =
    ctx |> set-font prm
        |> set-size prm

  let fix prm =
    let () = Param.fix prm#font-color in
    let () = Param.fix prm#font-latin in
    let () = Param.fix prm#font-cjk in
    let () = Param.fix prm#size in
    let () = Param.fix prm#par-margin-ratio in
    let () = Param.fix prm#leading-ratio in
    let () = Param.fix prm#min-gap-ratio in
    ()
end
